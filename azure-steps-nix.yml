  

steps:

  - bash: |
      OS_X_VER=$(sw_vers 2>/dev/null | grep BuildVer | awk '{print $2}' | cut -c1-2 || true); OS_X_VER=$((OS_X_VER-4)); [ "$OS_X_VER" -gt 0 ] || unset OS_X_VER

      commits_count=$(git log -n 999999 --date=raw --pretty=format:"%cd" | wc -l)
      echo "OS is ........................ [$OS]"
      echo "BUILD_SOURCESDIRECTORY is .... [$BUILD_SOURCESDIRECTORY]"
      echo "AGENT_BUILDDIRECTORY ......... [$AGENT_BUILDDIRECTORY]"
      echo "build number is .............. [$commits_count]"
      echo "working folder ............... [$(pwd)]"
      echo "message ...................... [$BUILD_SOURCEVERSIONMESSAGE]"
      echo "OS_X_VER ..................... [$OS_X_VER]"
      echo "uname's System ............... [$(uname -s)]"

      echo "##vso[task.setvariable variable=OS_X_VER]$OS_X_VER"
    displayName: 'INIT/MAIN [$(OS)]'

  - powershell: |
      $ErrorActionPreference = "Continue"
      & uname -a
      & uname -s
      & uname -m
      & df -h
      & diskutil list
      & sudo fdisk -l

      gdr -PSProvider 'FileSystem'
      & cmd /c "set | sort"
      & printenv | sort
      ""

      "env:psmodulePath is '$($env:psmodulePath)'"

      echo "OK?!"
      exit 0
    displayName: 'Show [$(OS)] Info'

  - bash: |
      set +e
      sed --version
      echo "";echo "";echo "";
      curl --version
      echo "";echo "";echo "";
      awk --version
      echo "";echo "";echo "";
      grep --version
      echo "";echo "";echo "";
      echo "pwd is '$(pwd)'"
      echo "";echo "";echo "";

      mkdir -p /d/123d
      ls -la /d

      mkdir -p /c/123c
      ls -la /c

      msbuild /version; echo -e "\n\n\n"
      dotnet build /version; echo ""
      nuget >.1.tmp; cat .1.tmp | head -3
      nuget
      mono --version
      dotnet --info
        
      # ls -la c:/123a
      # ls -la c:/
      # cmd /c dir c:\\123a
      # cmd /c dir c:\\123b


      exit 0
    displayName: 'Show .NET for [$(OS)]'

  - powershell: |
       & uname -s;
       & uname -a;
       & uname -r;
       $Env:PATH.Split([char]59) | sort
    displayName: 'Show PATH for [$(OS)]'

  - powershell: |
      if ($Env:OS -eq "Windows") {
        get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 } | sort-object -Property "DisplayName" | ft State, Name, DisplayName, StartMode, StartName
      }
    displayName: 'Show SQL Servers for [$(OS)]'

  - powershell: |
      if ($Env:OS -eq "Windows") {
        get-wmiobject win32_service | where { $true } | sort-object -Property "DisplayName" | ft State, Name, DisplayName, StartMode, StartName
      }
    displayName: 'Show All Windows Services for [$(OS)]'

  - bash: |
      # dotnet --info
      script=https://raw.githubusercontent.com/devizer/glist/master/install-disk-benchmark-from-source.sh; 
      (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -sSL $script) | bash
      # for bash we should spicify cmd-extention
      # disk-benchmark.cmd --help
    displayName: 'Install DISK-BENCHMARK for [$(OS)]'

  - powershell: |
      & disk-benchmark -s=100000 -t=2000
    displayName: 'Express disk-benchmark on [$(OS)]'

  - powershell: |
      & disk-benchmark -s=$(10*1024*1024) -t=20000
    displayName: 'Heavy disk-benchmark on [$(OS)]'

